#!/usr/bin/python

# used to parse files more easily
from __future__ import with_statement

from __future__ import division

import sys, os, inspect

import time

import thread
import pyaudio
import wave

# Qt4 bindings for core Qt functionalities (non-GUI)
from PyQt4 import QtCore
# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

# import the MainWindow widget from the converted .ui files
from pomorizermainwindow import Ui_MainWindow

class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    timer_data = QtCore.QTimer()
    t = 0
    max = 0
    sound_file = 'sounds/alarma.wav'
    
    
    
    def __init__(self, parent = None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        
        self.setupUi(self)
        
        
    
        # Periodical tasks
        QtCore.QObject.connect(self.timer_data,         QtCore.SIGNAL("timeout()"),             self.periodical_timer)
        QtCore.QObject.connect(self.startButton,         QtCore.SIGNAL("clicked()"),             self.start_timer)
        QtCore.QObject.connect(self.resetButton,         QtCore.SIGNAL("clicked()"),             self.reset_timer)

        self.lcdTimer.display(time.strftime("%H:%M:%S",time.gmtime(0)))
        
        self.timer_data.start(1000)
        
        self.littleBarList = [self.littleBar_1,self.littleBar_2,self.littleBar_3,self.littleBar_4,self.littleBar_5,self.littleBar_6,self.littleBar_7,self.littleBar_8]
        
        self.bigBarList = [self.bigBar_1, self.bigBar_2]
    
    def reset_timer(self):
        self.timeEdit.setTime(QtCore.QTime())
        self.lcdTimer.display(time.strftime("%H:%M:%S",time.gmtime(0)))
        #self.progressBar.setValue(0)
        self.startButton.setText('Start')
        self.init_progress_bars()
    
    def init_progress_bars(self):
        self.littleBarCompleted = [0,0,0,0,0,0,0,0]
        self.bigBarCompleted    = [0,0]
        
        for i in range(len(self.littleBarList)):
            self.littleBarList[i].setValue(0)
            self.littleBarList[i].setMaximum(100)
        
        for i in range(len(self.bigBarList)):
            self.bigBarList[i].setValue(0)
            self.bigBarList[i].setMaximum(100)
        
    def start_timer(self):
        if self.startButton.text() == 'Start':
            aux_time = self.timeEdit.time()
            self.t = aux_time.hour()*3600 + aux_time.minute()*60 + aux_time.second()
            self.max = self.t
            self.init_progress_bars()   
            self.startButton.setText('Pause')
            
            self.resetButton.setEnabled(0)
            
        elif self.startButton.text() == 'Pause':
            self.resetButton.setEnabled(1)
            self.startButton.setText('Continue')
            
        else :
            self.resetButton.setEnabled(0)
            self.startButton.setText('Pause')
        
    
    def periodical_timer(self):
        if self.startButton.isChecked():
            if self.t == 0:
                self.startButton.setChecked(0)
                self.startButton.setText('Start')
                self.resetButton.setEnabled(1)
                
                thread.start_new_thread(self.play_sound,(self.sound_file,1))
            else:
                self.t = self.t-1;

                self.lcdTimer.display(time.strftime("%H:%M:%S",time.gmtime(self.t)))
                
                self.paint_little_bars()
                
                self.paint_big_bars()
                
                
                
    def paint_little_bars(self):
        it = ((self.max-self.t)/self.max)*8
        
        if it > 1 and self.littleBarCompleted[int(it)-1] == 0:
            self.littleBarCompleted[int(it)-1] = 1
            
            palette = QtGui.QPalette(self.littleBarList[int(it)-1].palette())
            palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(QtCore.Qt.red))
            palette.setColor(QtGui.QPalette.Background, QtGui.QColor(QtCore.Qt.red))
            palette.setColor(QtGui.QPalette.Foreground, QtGui.QColor(QtCore.Qt.red))
            self.littleBarList[int(it)-1].setPalette(palette)
            
            self.littleBarList[int(it)-1].setValue(100)
            
        if int(it) < 8:
            self.littleBarList[int(it)].setValue((it - int(it))*100)
            
    def paint_big_bars(self):
        it = ((self.max-self.t)/self.max)*2
        
        if it >= 1 and self.bigBarCompleted[int(it)-1] == 0:
            self.bigBarCompleted[int(it)-1] = 1
            
            palette = QtGui.QPalette(self.bigBarList[int(it)-1].palette())
            palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(QtCore.Qt.red))
            palette.setColor(QtGui.QPalette.Background, QtGui.QColor(QtCore.Qt.red))
            palette.setColor(QtGui.QPalette.Foreground, QtGui.QColor(QtCore.Qt.red))
            self.bigBarList[int(it)-1].setPalette(palette)
            
            self.bigBarList[int(it)-1].setValue(100)
            
        if int(it) < 2:
            self.bigBarList[int(it)].setValue((it - int(it))*100)    
    
    def executionpath(self,filename):
        return os.path.join(os.path.dirname(inspect.getfile(sys._getframe(1))), filename)
    
    def play_sound(self, sound,*args):
        chunk = 1024
        
        filename = self.executionpath(sound)
        print 'file ', sound, ' is in the path ', filename
        wf = wave.open(filename, 'rb')
        
        p = pyaudio.PyAudio()
        
        # open stream
        stream = p.open(format =
                        p.get_format_from_width(wf.getsampwidth()),
                        channels = wf.getnchannels(),
                        rate = wf.getframerate(),
                        output = True)
        
        # read data
        data = wf.readframes(chunk)
        
        # play stream
        while data != '':
            stream.write(data)
            data = wf.readframes(chunk)
        
        stream.close()
        p.terminate()
    
# create the GUI application
app = QtGui.QApplication(sys.argv)

# instantiate the main window
dmw = DesignerMainWindow()

# show it
dmw.show()

# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
app.exec_()
#sys.exit(app.exec_())
